{
    "env": {
      "browser": true,
      "es2021": true,
      "node": true
    },
    "extends": [
      "plugin:react/recommended",
      "airbnb",
      "plugin:jest/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    "globals": {
      "jest": "readonly",
      "describe": "readonly",
      "it": "readonly",
      "expect": "readonly",
      "test": "readonly",
      "beforeEach": "readonly",
      "beforeAll": "readonly",
      "afterEach": "readonly",
      "afterAll": "readonly"
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true
      },
      "ecmaVersion": "latest",
      "sourceType": "module",
      "project": "./tsconfig.json"
    },
    "plugins": ["react", "@typescript-eslint", "jest"],
    "rules": {
      "import/prefer-default-export": "off",
      "import/no-unresolved": "off",
      "import/extensions": "off",
      "import/no-extraneous-dependencies": ["error", {"devDependencies": true, "optionalDependencies": false, "peerDependencies": false}],
      "object-curly-newline": "off",
      "quote-props": ["error", "consistent"],
      "no-shadow": "off",
      "@typescript-eslint/no-shadow": ["error"],
      "class-methods-use-this": "off",
      "react/react-in-jsx-scope": "off",
      // Necessary to prevent "unused React" trigger by no-unused-vars.
      // -
      "react/jsx-uses-react": "error",
      // Necessary to prevent no-unused-vars triggered by vars used inside JSX.
      // -
      "react/jsx-uses-vars": "error",
      // Necessary to prevent "unused React" and JSX-only variables trigger by no-unused-vars.
      // -
      "react/jsx-filename-extension": [
        "error",
        {
          "extensions": [".ts", ".tsx", ".js", ".jsx"]
        }
      ],
      "@typescript-eslint/consistent-type-imports": "error",
      "no-loss-of-precision": "off",
      "@typescript-eslint/no-loss-of-precision": ["error"],
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-confusing-void-expression": [
        "error",
        {
          "ignoreArrowShorthand": true
        }
      ],
      "@typescript-eslint/no-unsafe-argument": "error",
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": "error",
      "@typescript-eslint/promise-function-async": "error",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-misused-promises": "error",
      "@typescript-eslint/await-thenable": "error",
      // Require await section.
      // -
      "require-await": "off",
      "@typescript-eslint/require-await": "error",
      // Returning awaited values section.
      // -
      "no-return-await": "off",
      "@typescript-eslint/return-await": ["error", "in-try-catch"],
      // -
      "@typescript-eslint/no-unsafe-return": "error",
      "@typescript-eslint/prefer-ts-expect-error": "error",
      "@typescript-eslint/ban-types": [
        "error",
        {
          "types": {
            "String": {
              "message": "Use lowercase string instead",
              "fixWith": "string"
            }
          }
        }
      ],
      "@typescript-eslint/explicit-member-accessibility": "error",
      "@typescript-eslint/consistent-type-assertions": [
        "error",
        {
          // Single assertion style in TS / TSX files.
          // -
          "assertionStyle": "as",
          "objectLiteralTypeAssertions": "allow"
        }
      ],
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-throw-literal": "error",
      "@typescript-eslint/no-invalid-void-type": "error",
      "@typescript-eslint/switch-exhaustiveness-check": "error",
      "@typescript-eslint/no-empty-interface": "error",
      "@typescript-eslint/no-empty-function": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      "@typescript-eslint/method-signature-style": ["error", "property"],
      "@typescript-eslint/no-base-to-string": "error",
      "@typescript-eslint/no-extraneous-class": ["error", { "allowStaticOnly": true }],
      "@typescript-eslint/no-for-in-array": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-unnecessary-condition": ["error", { "allowConstantLoopConditions": true }],
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
      // Useless constructor section
      // -
      "no-useless-constructor": "off",
      "@typescript-eslint/no-useless-constructor": "error",
      // -
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-includes": "error",
      "@typescript-eslint/prefer-readonly": "error",
      "@typescript-eslint/prefer-nullish-coalescing": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-optional-chain": "error",
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/require-array-sort-compare": "error",
      "@typescript-eslint/restrict-plus-operands": "error",
      "@typescript-eslint/unified-signatures": "error",
      "@typescript-eslint/strict-boolean-expressions": "error",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": "default",
          "format": ["camelCase"]
        },
        {
          "selector": "function",
          "format": ["camelCase", "PascalCase"]
        },
        {
          "selector": "variable",
          "format": ["camelCase", "UPPER_CASE"]
        },
        {
          "selector": ["variable", "parameter", "property"],
          "types": ["boolean"],
          "format": ["PascalCase"],
          "prefix": ["is", "should", "has", "can", "did", "will", "does", "are", "do"]
        },
        {
          "selector": "property",
          "modifiers": ["private", "static", "readonly"],
          "format": ["UPPER_CASE"]
        },
        {
          "selector": "parameter",
          "format": ["camelCase"],
          "leadingUnderscore": "allow"
        },
        {
          "selector": "typeLike",
          "format": ["PascalCase"]
        },
        {
          "selector": "interface",
          "format": ["PascalCase"],
          "prefix": ["I"]
        },
        {
          "selector": "typeAlias",
          "format": ["PascalCase"],
          "prefix": ["T"]
        },
        {
          "selector": "typeParameter",
          "format": ["UPPER_CASE"]
        }
      ],
      "@typescript-eslint/restrict-template-expressions": ["error", { "allowNumber": true }],
      "import/newline-after-import": ["error", { "count": 1 }],
      "lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
      "padding-line-between-statements": [
        "error",
        {
          "blankLine": "always",
          "prev": "multiline-block-like",
          "next": "*"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "multiline-block-like"
        },
        {
          "blankLine": "always",
          "prev": "multiline-const",
          "next": "*"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "multiline-const"
        },
        {
          "blankLine": "always",
          "prev": "multiline-var",
          "next": "*"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "multiline-var"
        },
        {
          "blankLine": "always",
          "prev": "multiline-let",
          "next": "*"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "multiline-let"
        },
        {
          "blankLine": "always",
          "prev": "multiline-expression",
          "next": "*"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "multiline-expression"
        }
      ]
    }
  }  